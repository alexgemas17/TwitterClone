{"version":3,"sources":["firebase/config.js","routers/PublicRouter.js","routers/PrivateRouter.js","types.js","helpers/UploadTweetToDB.js","actions/tweet.js","actions/auth.js","components/Navbar/LogoComponent.js","components/Loggin/LoginComponent.js","components/Explorer/ExplorerComponent.js","components/Navbar/InfoUserComponent.js","components/Navbar/MenuComponent.js","components/Navbar/NavbarComponent.js","components/Tweets/WriteTweetsComponent.js","components/Timeline/HeaderTimelineComponent.js","components/Timeline/TimelineListItem.js","components/Timeline/TimelineList.js","components/Timeline/TimelineComponent.js","components/User/HeaderUser.js","components/User/UserComponent.js","components/TwitterApp.js","routers/AppRouter.js","reducers/authReducer.js","reducers/tweetReducer.js","store/store.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","githubAuthProvider","GithubAuthProvider","PublicRouter","isAuthenticated","Component","component","rest","props","to","prototype","PropTypes","bool","isRequired","func","PrivateRouter","types","UploadTweetToDB","uidUser","newTweet","a","time","collection","add","TweetID","id","tweetID","type","idTweets","doc","update","uid","idTimeline","get","then","querySnapshot","forEach","follower","data","console","log","userID","catch","error","createTweet","userName","userDisplayName","photoUserURL","photoURL","textBody","payload","addTweet","tweetUID","cleanTimeline","login","displayName","logout","LogoComponent","className","LoginComponent","dispatch","useDispatch","role","alt","name","onClick","signInWithPopup","user","email","split","dataUser","exists","newUser","likes","tweets","description","set","src","ExplorerComponent","history","useHistory","useState","valueSearch","setValueSearch","onSubmit","e","preventDefault","push","placeholder","value","onChange","target","InfoUserComponent","UserData","useSelector","state","authReducer","PhotoURL","DisplayName","UserName","MenuComponent","activeItemMenu","color","exact","activeStyle","signOut","NavbarComponent","handleInput","WriteTweetsComponent","valueTextArea","setValueTextArea","UID","NewTweet","Date","getTime","HeaderTimelineComponent","TimelineListItem","tweet","TimelineList","UserDataUID","CollectionFromDB","timeline","tweetReducer","useEffect","onSnapshot","snapshot","docChanges","length","orderBy","limit","LoadNewTimeline","map","key","TimelineComponent","HeaderUser","Likes","UserComponent","setUser","useLocation","pathname","userRef","where","undefined","UserUID","Tweets","Description","TwitterApp","path","AppRouter","checkingDBLogin","setCheckingDBLogin","isLoggedIn","setIsLoggedIn","onAuthStateChanged","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","find","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8726f5f7.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCYDK5HWgZiMGe_UOk5H6QiBK88TJ8X2Ss\",\r\n    authDomain: \"twitter-clone-3407a.firebaseapp.com\",\r\n    databaseURL: \"https://twitter-clone-3407a.firebaseio.com\",\r\n    projectId: \"twitter-clone-3407a\",\r\n    storageBucket: \"twitter-clone-3407a.appspot.com\",\r\n    messagingSenderId: \"459828175983\",\r\n    appId: \"1:459828175983:web:26f2517cdb4b7037f6999a\",\r\n    measurementId: \"G-S72ZFP5TSL\"\r\n  };\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// Referencia a la base de datos\r\nconst db = firebase.firestore()\r\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider()\r\nconst githubAuthProvider = new firebase.auth.GithubAuthProvider()\r\n\r\nexport {\r\n    db, \r\n    googleAuthProvider,\r\n    githubAuthProvider,\r\n    firebase\r\n}","import React from 'react'\r\nimport {  Route, Redirect } from 'react-router-dom'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const PublicRouter = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            component={ (props) => \r\n                ( isAuthenticated )\r\n                ? ( <Redirect to='/' /> )\r\n                : ( <Component {...props} /> )\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nPublicRouter.prototype = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\nimport {  Route, Redirect } from 'react-router-dom'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const PrivateRouter = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            component={ (props) => \r\n                ( isAuthenticated )\r\n                ? ( <Component {...props} /> )\r\n                : ( <Redirect to='/login' /> )\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nPrivateRouter.prototype = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","\r\nexport const types = {\r\n    login: '[Auth] login',\r\n    logout: '[Auth] logout',\r\n\r\n    createTweet: '[Tweets] New tweet',\r\n    addTweet: '[Tweets] Add new',\r\n    addTweetsToTimeline: '[Tweets] Add tweets to timeline', \r\n\r\n    loadTimeline: '[Timeline] Loading timeline',\r\n    cleanTimeline: '[Timeline] clean timeline data'\r\n}","/*\r\nconst NewTweet = {\r\n    userName: userName,\r\n    userDisplayName: userDisplayName,\r\n    photoUserURL: photoUserURL,\r\n    photoURL: photoURL,\r\n    textBody: textBody,\r\n    time: new Date().getTime()\r\n}\r\n*/\r\n\r\nimport { db } from \"../firebase/config\"\r\n\r\nexport const UploadTweetToDB = async ( uidUser, newTweet ) => {\r\n    const time = newTweet.time;\r\n\r\n    // Lo enlazamos en tabla de tweets\r\n    const { id:TweetID } = await db.collection('tweets').add(newTweet)\r\n\r\n    //Enlazamos el tuit con el usuario: TIPE -> Tweet, Retweet\r\n    const { id:idTweets } = await db.collection(`users/${uidUser}/Tweets`).add({ tweetID: TweetID, type: 'Tweet', time: time})\r\n    db.collection(`users/${uidUser}/Tweets`).doc(idTweets).update({ uid:idTweets})\r\n\r\n    const { id:idTimeline } = await db.collection(`users/${uidUser}/Timeline`).add({ tweetID: TweetID, type: 'Tweet', time: time})\r\n    db.collection(`users/${uidUser}/Timeline`).doc(idTimeline).update({ uid:idTimeline })\r\n\r\n    // Añadir a mis followers en sus timelines mi tweet ---> Esto se debe pasar a Firebase FUNCTIONS\r\n    db.collection(`users/${uidUser}/Followers`)\r\n    .get()\r\n    .then((querySnapshot) => {\r\n        querySnapshot.forEach( async(doc) => {\r\n            const follower = doc.data()\r\n            console.log(follower)\r\n            const { id } = await db.collection(`users/${follower.userID}/Timeline`).add({ tweetID: TweetID, type: 'Tweet', time: time})\r\n            db.collection(`users/${follower.userID}/Timeline`).doc(id).update({ uid:id })\r\n        });\r\n    })\r\n    .catch(function(error) {\r\n        console.log(\"Error getting documents: \", error);\r\n    });\r\n\r\n    return true;\r\n}","import { db } from \"../firebase/config\"\r\nimport { UploadTweetToDB } from \"../helpers/UploadTweetToDB\"\r\nimport { types } from \"../types\"\r\n\r\nexport const CreateNewTweet = (uid, userName, userDisplayName, photoUserURL, photoURL, textBody) => {\r\n    return async (dispatch) => {\r\n\r\n        const NewTweet = {\r\n            userName: userName,\r\n            userDisplayName: userDisplayName,\r\n            photoUserURL: photoUserURL,\r\n            photoURL: photoURL,\r\n            textBody: textBody,\r\n            time: new Date().getTime()\r\n        }\r\n\r\n        if( UploadTweetToDB(uid, NewTweet) ){\r\n            dispatch(createTweet(userName, userDisplayName, photoUserURL, photoURL, textBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport const createTweet = (userName, userDisplayName, photoUserURL, photoURL, textBody) => {\r\n    return {\r\n        type: types.createTweet,\r\n        payload: {\r\n            userName: userName,\r\n            userDisplayName: userDisplayName,\r\n            photoUserURL: photoUserURL,\r\n            photoURL: photoURL,\r\n            textBody: textBody\r\n        }\r\n    }\r\n}\r\n\r\nexport const addTweet = (tweetUID, userName, userDisplayName, photoUserURL, photoURL, textBody) => {\r\n    return {\r\n        type: types.addTweet,\r\n        payload: {\r\n            tweetUID: tweetUID,\r\n            userName: userName,\r\n            userDisplayName: userDisplayName,\r\n            photoUserURL: photoUserURL,\r\n            photoURL: photoURL,\r\n            textBody: textBody\r\n        }\r\n    }\r\n}\r\n\r\nexport const StartLoadTimeline = ( uid ) => {\r\n    return async (dispatch) => {\r\n        dispatch(cleanTimeline())\r\n\r\n        await db.collection(`users/${uid}/Timeline`).orderBy(\"time\").limit(50)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach( (doc) => {\r\n                if (doc.exists) {\r\n                     db.collection('tweets').doc(doc.data().tweetID)\r\n                    .get()\r\n                    .then((data) => {\r\n                        const tweet = data.data() \r\n                        \r\n                        dispatch(\r\n                            createTweet(\r\n                                tweet.userName, \r\n                                tweet.userDisplayName, \r\n                                tweet.photoUserURL, \r\n                                tweet.photoURL, \r\n                                tweet.textBody\r\n                            )\r\n                        )\r\n                    })\r\n                }\r\n            })\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport const LoadNewTimeline = ( uid, CollectionFromDB ) => {\r\n    return async (dispatch) => {\r\n\r\n        await db.collection(`users/${uid}/${CollectionFromDB}`).orderBy(\"time\").limit(50)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach( (doc) => {\r\n                if (doc.exists) {\r\n                    const tweetUID = doc.data().uid\r\n                    db.collection('tweets').doc(doc.data().tweetID)\r\n                    .get()\r\n                    .then((data) => {\r\n                        const tweet = data.data() \r\n                        \r\n                        dispatch(\r\n                            addTweet(\r\n                                tweetUID,\r\n                                tweet.userName, \r\n                                tweet.userDisplayName, \r\n                                tweet.photoUserURL, \r\n                                tweet.photoURL, \r\n                                tweet.textBody\r\n                            )\r\n                        )\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const AddTweetsToTimeline = ( tweets ) => {\r\n    return {\r\n        type: types.addTweetsToTimeline,\r\n        payload: tweets\r\n    }\r\n}\r\n\r\n\r\nexport const LoadTimeline = (timeline) => {\r\n    return {\r\n        type: types.loadTimeline,\r\n        payload: timeline\r\n    }\r\n}\r\n\r\nexport const cleanTimeline = () => {\r\n    return {\r\n        type: types.cleanTimeline\r\n    }\r\n}","import {db, firebase, githubAuthProvider, googleAuthProvider}  from '../firebase/config'\r\nimport { types } from '../types'\r\nimport { cleanTimeline } from './tweet'\r\n\r\nexport const StartLoginWithGithub = () => {\r\n    return (dispatch) => {\r\n        \r\n        firebase.auth().signInWithPopup( githubAuthProvider )\r\n        .then( ({user}) => {\r\n            const userName = user.email.split('@')[0]\r\n\r\n            db.collection('users').doc(user.uid).get()\r\n            .then(dataUser => {\r\n                if(!dataUser.exists) {\r\n                    \r\n                    const newUser = {\r\n                        displayName: user.displayName,\r\n                        userName: userName,\r\n                        photoURL: user.photoURL,\r\n                        email: user.email,\r\n                        likes: 0,\r\n                        tweets: 0,\r\n                        description: 0\r\n                    }\r\n\r\n                    db.collection('users').doc(user.uid).set(newUser)\r\n                }\r\n            })\r\n            dispatch(login( user.uid, userName, user.displayName, user.photoURL ))\r\n        })\r\n    }\r\n}\r\n\r\nexport const StartLoginWithGoogle = () => {\r\n    return (dispatch) => {\r\n        firebase.auth().signInWithPopup( googleAuthProvider )\r\n        .then( ({user}) => {\r\n            const userName = user.email.split('@')[0]\r\n\r\n            db.collection('users').doc(user.uid).get()\r\n            .then(dataUser => {\r\n                if(!dataUser.exists) {\r\n                    \r\n                    const newUser = {\r\n                        displayName: user.displayName,\r\n                        userName: userName,\r\n                        photoURL: user.photoURL,\r\n                        email: user.email,\r\n                        likes: 0,\r\n                        tweets: 0,\r\n                        description: 0\r\n                    }\r\n\r\n                    db.collection('users').doc(user.uid).set(newUser)\r\n                }\r\n            })\r\n            dispatch(login( user.uid, userName, user.displayName, user.photoURL ))\r\n        })\r\n    }\r\n}\r\n\r\nexport const startLogout = () => {\r\n    return async (dispatch) => {\r\n        await firebase.auth().signOut()\r\n\r\n        dispatch(logout())\r\n        dispatch(cleanTimeline())\r\n    }\r\n}\r\n\r\nexport const login = (uid, userName, displayName, photoURL) => {\r\n    return {\r\n        type: types.login,\r\n        payload: {\r\n            uid,\r\n            userName,\r\n            displayName,\r\n            photoURL\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: types.logout\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const LogoComponent = () => {\r\n    return (\r\n        <div className='logo-container'> \r\n            <i className=\"fab fa-twitter\"></i>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { StartLoginWithGithub, StartLoginWithGoogle } from '../../actions/auth'\r\nimport { LogoComponent } from '../Navbar/LogoComponent'\r\n\r\nimport './styles.css'\r\n\r\nexport const LoginComponent = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const handleInputLoginWithGithub = () => {\r\n        dispatch( StartLoginWithGithub() )\r\n    }\r\n\r\n    const handleInputLoginWithGoogle = () => {\r\n        dispatch( StartLoginWithGoogle() )\r\n    }\r\n\r\n    return (\r\n        <div className='login'>\r\n            <div className='LeftSide'>\r\n                <i className=\"fab fa-twitter logoBackground\"></i>\r\n                <div>   \r\n                    <div className='text-item'>\r\n                        <i className=\"fas fa-search\"></i>\r\n                        <span> Sigue lo que te interesa. </span>\r\n                    </div>\r\n                    \r\n                    <div className='text-item'>\r\n                        <i className=\"fas fa-user-friends\"></i>\r\n                        <span> Entérate de qué está hablando la gente. </span>\r\n                    </div>\r\n\r\n                    <div className='text-item'>\r\n                        <i className=\"fas fa-comments\"></i>\r\n                        <span> Únete a la conversación. </span>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n\r\n            <div className='RightSide'>\r\n                <div className='Header'>\r\n                    <div className='logo'>\r\n                        <LogoComponent />\r\n                    </div>\r\n                    <h1>Mira lo que está pasando en el mundo en este momento</h1>\r\n                </div>\r\n\r\n                <div className='social-networks'>\r\n                    <p> <b>Login with:</b></p>\r\n                    \r\n                    <div \r\n                        className=\"btn-login github\" \r\n                        role=\"button\" \r\n                        alt='github icon'\r\n                        name='btn-github'\r\n                        onClick={handleInputLoginWithGithub}\r\n                    >\r\n\r\n                        <div className=\"icon-wrapper\">\r\n                            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/1024px-Octicons-mark-github.svg.png\" alt=\"github icon\" />\r\n                        </div>\r\n\r\n                        <p className=\"btn-text\">\r\n                            <b>Sign in with Github</b>\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div  \r\n                        className=\"btn-login linkedin\" \r\n                        role=\"button\" \r\n                        alt='linkedin icon'\r\n                        name='btn-github'\r\n                        onClick={handleInputLoginWithGoogle}\r\n                    >\r\n                        <div className=\"icon-wrapper\">\r\n                            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/1200px-Google_%22G%22_Logo.svg.png\" alt=\"linkedin icon\" />\r\n                        </div>\r\n\r\n                        <p className=\"btn-text\">\r\n                            <b>Sign in with Google</b>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const ExplorerComponent = () => {\r\n\r\n    const history = useHistory()\r\n\r\n    const [valueSearch, setValueSearch] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setValueSearch(e.target.value)\r\n    }\r\n\r\n    const handleInputSearch = (e) => {\r\n        e.preventDefault()\r\n\r\n        history.push(`/${valueSearch}`)\r\n    }\r\n\r\n    return (\r\n        <div className='Explorer'>\r\n            <form onSubmit={handleInputSearch}>\r\n                <div className='searchbar'>\r\n                <input \r\n                    name='search'\r\n                    placeholder='Buscar en Twitter' \r\n                    value={valueSearch}\r\n                    onChange={handleInputChange}\r\n                />\r\n                </div>\r\n            </form>\r\n        </div> \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const InfoUserComponent = () => {\r\n    \r\n    const { UserData } = useSelector(state => state.authReducer)\r\n\r\n    return (\r\n        <div className='UserInfo'>\r\n            <div className='UserPhoto'>\r\n                <img src={ UserData.PhotoURL } alt='User foto'/>\r\n            </div>\r\n\r\n            <div className='UserData'>\r\n                <p className='UserName'>{ UserData.DisplayName }</p>\r\n                <p className='UserID'>@{ UserData.UserName }</p>\r\n            </div>\r\n\r\n            <div className='UserMoreOption'>\r\n                <i className=\"fas fa-chevron-circle-down\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { startLogout } from '../../actions/auth'\r\n\r\nexport const MenuComponent = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {UserData} = useSelector(state => state.authReducer)\r\n\r\n    const logout = () => {\r\n        dispatch(startLogout())\r\n    }\r\n\r\n    const activeItemMenu = {\r\n        color: \"rgb(29, 161, 242)\"\r\n      }\r\n\r\n    return (\r\n        <div className='menu-container'>\r\n\r\n            <NavLink \r\n                exact to={'/'} \r\n                activeStyle= {activeItemMenu}\r\n            >\r\n                <div className='menu-item'>\r\n                    <span><i className=\"fas fa-home\"></i> Inicio </span>\r\n                </div>\r\n            </NavLink>\r\n\r\n            <div className='menu-item'>\r\n                <span><i className=\"far fa-envelope\"></i> Mensajes </span>\r\n            </div>\r\n\r\n            <div className='menu-item'>\r\n                <span><i className=\"far fa-bookmark\"></i> Guardados </span>\r\n            </div>\r\n\r\n            <NavLink to={`${UserData.UserName}`} activeStyle={activeItemMenu}>\r\n                <div className='menu-item'>\r\n                    <span><i className=\"far fa-user\"></i> Perfil </span>\r\n                </div>\r\n            </NavLink>\r\n\r\n            <div className='menu-item' role='button' alt='more option botton' onClick={logout}>\r\n                <span><i className=\"fas fa-sign-out-alt flip\"></i> Logout </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { db } from '../../firebase/config'\r\nimport { InfoUserComponent } from './InfoUserComponent'\r\nimport { LogoComponent } from './LogoComponent'\r\nimport { MenuComponent } from './MenuComponent'\r\n\r\nexport const NavbarComponent = () => {\r\n\r\n    const handleInput = async () => {\r\n        /*\r\n        const uid = 'tfUPA10GhJoEej8gyFSk'\r\n\r\n        // Creamos un nuevo Tweet\r\n        \r\n        const newTweet = {\r\n            usedID: uid,\r\n            body: 'This is a tweet 5 !!!!!!!!!',\r\n            date: new Date().getTime()\r\n        }\r\n        \r\n        // Lo enlazamos en tabla de tweets\r\n        const { id:TweetID } = await db.collection('tweets').add(newTweet)\r\n\r\n        //Enlazamos el tuit con el usuario: TIPE -> Tweet, Retweet\r\n        db.collection(`users/${uid}/Tweets`).add({ tweetID: TweetID, type: 'Tweet'})\r\n        db.collection(`users/${uid}/Timeline`).add({ tweetID: TweetID, type: 'Tweet'})\r\n        \r\n        // Actualizar field de un documento (en este caso el de un usuario)\r\n        db.collection(`users`).doc(uid).update({\r\n            numFavs: 1\r\n        })\r\n\r\n        // Añadir a mis followers en sus timelines mi tweet ---> Esto se debe pasar a Firebase FUNCTIONS\r\n        db.collection(`users/${uid}/Followers`)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                console.log(doc.id, \" => \", doc.data());\r\n                const follower = doc.data()\r\n                db.collection(`users/${ follower.userID }/Timeline`).add({ tweetID: TweetID, type: 'Tweet'})\r\n            });\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Error getting documents: \", error);\r\n        });\r\n        \r\n\r\n        /*\r\n        // Obtengo el tweet con ese ID\r\n        db.collection(`users/${uid}/Timeline`)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                db.collection('tweets').doc(doc.data().tuidID)\r\n                .get()\r\n                .then((data) => {\r\n                    console.log(data.data())\r\n                })\r\n            })\r\n        })\r\n\r\n        // Así estoy escuchando a una colección concreta!\r\n        db.collection(`users/${uid}/Timeline`)\r\n        .onSnapshot(function(snapshot) {\r\n            if(snapshot.docChanges().length > 0){\r\n                console.log('Nuevo tweet en mi timeline!')\r\n            }\r\n        });\r\n    \r\n\r\n        // ELIMINAR TWEETS A MÍ\r\n        /*\r\n        const tweetDeleteID = '0gV5aY9b04wEKcOWavg0'\r\n        db.collection(\"tweets\").doc(tweetDeleteID).delete().then(() => {\r\n            console.log(\"Document successfully deleted!\");\r\n        }).catch(function(error) {\r\n            console.error(\"Error removing document: \", error);\r\n        });\r\n\r\n        db.collection(`users/${uid}/Followers`)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                \r\n                //console.log(doc.id, \" => \", doc.data());\r\n                const followerID = doc.data().userID\r\n                db.collection(`users/${followerID}/Timeline`)\r\n                .get()\r\n                .then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {\r\n                        if( doc.data().tweetID === tweetDeleteID ){\r\n                            db.collection(`users/${followerID}/Timeline`).doc(doc.id).delete().then(() => {\r\n                                console.log(\"Document successfully deleted!\");\r\n                            }).catch(function(error) {\r\n                                console.error(\"Error removing document: \", error);\r\n                            });\r\n                        }\r\n                    })\r\n                });\r\n            });\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Error getting documents: \", error);\r\n        });\r\n        */\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='Navbar'>\r\n            <LogoComponent />\r\n\r\n            <MenuComponent />\r\n\r\n            <div className='button-tuit' onClick={handleInput}> \r\n                <span className='btn-primary'>Twittear</span> \r\n            </div>\r\n\r\n            <InfoUserComponent />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CreateNewTweet } from '../../actions/tweet'\r\nimport './style.css'\r\n\r\nexport const WriteTweetsComponent = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { UserData } = useSelector(state => state.authReducer)\r\n    const [valueTextArea, setValueTextArea] = useState('')\r\n\r\n    const InputTextareaChage = (e) => {       \r\n        setValueTextArea(e.target.value)\r\n    }\r\n\r\n    const handleInputSubmit = () => {\r\n        dispatch( CreateNewTweet(UserData.UID, UserData.UserName, UserData.DisplayName, UserData.PhotoURL, '', valueTextArea) )\r\n\r\n        setValueTextArea('')\r\n    }\r\n\r\n    return (\r\n        <div className='tweet-container'>\r\n            <div className='tweet-input'>\r\n                <div className='TweetInputPhoto'>\r\n                    <img src={ UserData.PhotoURL } type='text' alt='User foto'/>\r\n                </div>\r\n\r\n                <textarea \r\n                    type='text' \r\n                    name='textareatweet'\r\n                    placeholder='¿Qué está pasando?'\r\n                    value={valueTextArea}\r\n                    onChange={InputTextareaChage}\r\n                    />\r\n            </div>\r\n\r\n            <div className='tweet-buttons'>\r\n                <div className='tweet-btn' type='button' onClick={handleInputSubmit}>\r\n                    <span>Twittear</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const HeaderTimelineComponent = () => {\r\n    return (\r\n        <div className='HeaderTimeline'>\r\n            <h3> Tweets más recientes </h3>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const TimelineListItem = ( {tweet} ) => {\r\n    return (\r\n        <div className='Tweet-wrapper'>\r\n\r\n            <div className='TweetContainer'>\r\n                <div className='TweetPhoto'>\r\n                    <Link to={`/${tweet.userName}`}>\r\n                    <img src={tweet.photoUserURL} alt='User foto'/>\r\n                    </Link>\r\n                </div>\r\n\r\n                <div className='TweetData'>\r\n                    <div className='TweetInfoUser'>\r\n                        <p className='UserName'>{tweet.userDisplayName}</p>\r\n                        <p className='UserID'>@{tweet.userName}</p>\r\n                    </div>\r\n                    <p>{tweet.textBody}</p>\r\n                </div>\r\n\r\n                <div className='TweetMoreOption'>\r\n                    <i className=\"fas fa-ellipsis-h\"></i>\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                (tweet.photoURL) && \r\n                (<div className='TweetImage'>\r\n                    <img src={tweet.photoURL} alt='User foto'/>\r\n                </div>)\r\n            }\r\n\r\n            <div className='SocialMedia'>\r\n                <i className=\"fas fa-retweet TweetMedia Retweet\"></i>\r\n                <i className=\"far fa-heart TweetMedia Like\"></i>\r\n                <i className=\"far fa-comment TweetMedia Comment\"></i>\r\n                <i className=\"far fa-share-square TweetMedia Share\"></i>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LoadNewTimeline } from '../../actions/tweet'\r\nimport { db } from '../../firebase/config'\r\nimport { TimelineListItem } from './TimelineListItem'\r\n\r\nexport const TimelineList = ({UserDataUID, CollectionFromDB}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { timeline } = useSelector(state => state.tweetReducer)\r\n\r\n    console.log(timeline)\r\n\r\n    useEffect(() => {\r\n        // Cargamos los tweets\r\n        db.collection(`users/${UserDataUID}/${CollectionFromDB}`)\r\n        .onSnapshot(function(snapshot) {\r\n            if(snapshot.docChanges().length > 0){\r\n                dispatch( LoadNewTimeline( UserDataUID, CollectionFromDB))\r\n            }\r\n        });\r\n    }, [UserDataUID, CollectionFromDB, timeline, dispatch])\r\n\r\n    return (\r\n        <div className='TimelineList'>\r\n            {\r\n                timeline.map((tweet, key) => {\r\n                    return <TimelineListItem key={key} tweet={tweet} />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { WriteTweetsComponent } from '../Tweets/WriteTweetsComponent'\r\nimport { HeaderTimelineComponent } from './HeaderTimelineComponent'\r\nimport { TimelineList } from './TimelineList'\r\n\r\nexport const TimelineComponent = () => {\r\n\r\n    const { UserData } = useSelector(state => state.authReducer)\r\n\r\n    return (\r\n        <div className='Timeline'>\r\n            <HeaderTimelineComponent />\r\n\r\n            <WriteTweetsComponent />\r\n\r\n            <hr />\r\n\r\n            <TimelineList UserDataUID={UserData.UID} CollectionFromDB={'Timeline'} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const HeaderUser = ({ user}) => {\r\n\r\n    return (\r\n        <div className='UserHeader'>\r\n            <div>\r\n                <Link to={'/'}>\r\n                    <i className=\"fas fa-arrow-left\"></i>\r\n                </Link>\r\n            </div>\r\n\r\n            {\r\n                (user)&&(\r\n                    <div>\r\n                        <p> {user.DisplayName}</p>\r\n                        <p className='subtitle'> {user.Likes} tweets </p>\r\n                    </div>\r\n                )\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { db } from '../../firebase/config'\r\nimport { TimelineList } from '../Timeline/TimelineList'\r\nimport { HeaderUser } from './HeaderUser'\r\n\r\nexport const UserComponent = () => {\r\n\r\n    const [user, setUser] = useState({})\r\n    const location = useLocation()\r\n    const UserName = location.pathname.split('/')[1]\r\n    \r\n    useEffect(() => {\r\n        const usersRef = db.collection(\"users\");\r\n        const userRef = usersRef.where(\"userName\", \"==\", `${UserName}`)\r\n        console.log(userRef)\r\n        \r\n        userRef.get()\r\n        .then((querySnapshot) => {\r\n            setUser(undefined)\r\n            querySnapshot.forEach( (doc) => {\r\n                const dataUser = doc.data()\r\n                setUser({\r\n                    UserUID: doc.id,\r\n                    DisplayName : dataUser.displayName,\r\n                    UserName : dataUser.userName,\r\n                    PhotoURL : dataUser.photoURL,\r\n                    Likes : dataUser.likes,\r\n                    Tweets:  dataUser.tweets,\r\n                    Description: dataUser.description\r\n                })\r\n            });\r\n        })\r\n        .catch(function(error) {\r\n            console.log(\"Error getting documents: \", error);\r\n        });\r\n    }, [UserName])\r\n\r\n    if(!user){\r\n        return <div className='Timeline'>\r\n            <HeaderUser  user={undefined} />\r\n            <div className='ErrorSearch'>\r\n                <h1> Usuario no encontrado :( </h1>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className='Timeline'>\r\n            <HeaderUser user={user}/>\r\n\r\n            <div className='header_photo'>\r\n                <div className='User'>\r\n                    <img src={user.PhotoURL} alt='user' />\r\n                </div>\r\n\r\n                <img src='./imgs/header_photo.png' alt='header' />\r\n            </div>\r\n\r\n            <div className='UserText'>\r\n                <div className='Info' >\r\n                    <h2 className='DisplayName'>{user.DisplayName}</h2>\r\n                    <p className='NameID'>@{user.UserName}</p>\r\n                </div>\r\n\r\n                <p className='description'>{user.Description}</p>\r\n            </div>\r\n\r\n            <div className='TweetBarHeader'>\r\n                <h3> Tweets </h3>\r\n            </div>\r\n\r\n            <TimelineList UserDataUID={user.UserUID} CollectionFromDB={'Tweets'} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ExplorerComponent } from './Explorer/ExplorerComponent';\nimport { NavbarComponent } from './Navbar/NavbarComponent';\nimport { TimelineComponent } from './Timeline/TimelineComponent';\nimport { UserComponent } from './User/UserComponent';\n\nexport const TwitterApp = () => {\n  return (\n    <div className='main-wrapper'>\n      <div className='container'>\n\n        <NavbarComponent />\n        \n        <Switch>\n          <Route path='/:userID' component={ UserComponent }/>\n          <Route exact path=\"/\" component={ TimelineComponent } />\n        </Switch>\n\n        <ExplorerComponent />\n\n      </div>\n  </div>\n  )\n}","import React, { useEffect, useState } from 'react'\r\nimport { firebase } from '../firebase/config'\r\nimport { \r\n    BrowserRouter as Router,\r\n    Redirect,\r\n    Switch \r\n} from 'react-router-dom'\r\nimport { PublicRouter } from './PublicRouter'\r\nimport { PrivateRouter } from './PrivateRouter'\r\nimport { LoginComponent } from '../components/Loggin/LoginComponent'\r\nimport { TwitterApp } from '../components/TwitterApp'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from '../actions/auth'\r\n\r\n\r\nexport const AppRouter = () => {\r\n    const dispatch = useDispatch()\r\n    const [checkingDBLogin, setCheckingDBLogin] = useState(true)\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\r\n\r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if(user?.uid){\r\n                const userName = user.email.split('@')[0]\r\n                dispatch( login( user.uid, userName, user.displayName, user.photoURL ) )\r\n                setIsLoggedIn(true)\r\n            }\r\n            else{\r\n                setIsLoggedIn(false)\r\n            }\r\n\r\n            setCheckingDBLogin(false)\r\n        })\r\n    }, [dispatch])\r\n\r\n    if(checkingDBLogin){\r\n        return (\r\n            <>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PublicRouter \r\n                        path='/login'\r\n                        isAuthenticated={isLoggedIn}\r\n                        component={LoginComponent}\r\n                    />\r\n\r\n                    <PrivateRouter \r\n                        path='/'\r\n                        isAuthenticated={isLoggedIn}\r\n                        component={TwitterApp}\r\n                    />\r\n\r\n                    <Redirect to='login' />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}","import { types } from \"../types\";\r\n\r\nconst initialState = {\r\n\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.login:\r\n            return {\r\n                UserData: {\r\n                    UID: action.payload.uid,\r\n                    UserName: action.payload.userName,\r\n                    DisplayName: action.payload.displayName,\r\n                    PhotoURL: action.payload.photoURL\r\n                }\r\n            }\r\n\r\n        case types.logout:\r\n           return {}\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}","import { types } from \"../types\";\r\n\r\nconst initialState = {\r\n    timeline: []\r\n}\r\n\r\nexport const tweetReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case(types.createTweet): \r\n            return {\r\n                timeline: [action.payload, ...state.timeline]\r\n            }\r\n        case types.loadTimeline:\r\n            return {\r\n                timeline: action.payload\r\n            }\r\n        case types.cleanTimeline: \r\n            return {\r\n                timeline: []\r\n            }\r\n\r\n        case types.addTweetsToTimeline: \r\n            return {\r\n                timeline: [ action.payload, ...state.timeline ]\r\n            }\r\n\r\n        case types.addTweet:\r\n            if(state.timeline.find(tweet => tweet.tweetUID === action.payload.tweetUID)){\r\n                return state\r\n            }else {\r\n                return {\r\n                    timeline: [ action.payload, ...state.timeline]\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport { authReducer } from \"../reducers/authReducer\";\r\nimport { tweetReducer } from \"../reducers/tweetReducer\";\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst reducers = combineReducers({\r\n    authReducer,\r\n    tweetReducer\r\n})\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { AppRouter } from './routers/AppRouter';\nimport { store } from './store/store';\n\nimport './styles/styles.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppRouter />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}